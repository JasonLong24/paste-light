#!/usr/bin/env bash

EXEC_INIT=false
EXEC_ADD=false
EXEC_COMP=false

function isInit() {
  if [[ -f .paste ]]; then
    return 0
  else
    return 1
  fi
}

function isOtherArgs() {
  # Add Arguments that the user can execute
  local poss_exec=( "$EXEC_INIT" "$EXEC_ADD" "$EXEC_COMP" )
  for i in "${poss_exec[@]}"; do
    if [[ $i = true ]]; then
      count=$(expr $count + 1)
    fi
  done

  if [[ $count -gt 1 ]]; then
    return 0
  else
    return 1
  fi
}

function initialize() {
  if isOtherArgs; then echo You cannot execute initialize command with other arguments. See --help. && exit 1; else
    if isInit; then echo Project already initialized && exit 0; else
      mkdir posts && touch .paste
      echo -e 'Project initialized\nSee --help for usage.'
      exit 0
    fi
  fi
}

function addPost() {
  if isOtherArgs; then echo You cannot add a new post with other commands. See --help. && exit 1; else
    if isInit; then
      touch posts/$POST_FILE.paste
      if [ -z $EDITOR ]; then
        nano posts/$POST_FILE.paste
      else
        $EDITOR posts/$POST_FILE.paste
      fi
      exit 0
    fi
  fi
}

function genIndex() {
  if isOtherArgs; then echo You cannot execute compile command with other arguments. See --help. && exit 1; else
  echo compile time
  fi
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
  -init|--initialize)
  EXEC_INIT=true
  shift
  ;;
  -a|--add)
  if [[ $2 = "" ]] || [[ $2 =~ ^- ]]; then
    echo add takes one arguement. See --help && exit 1
  else
    POST_FILE="$2"
    EXEC_ADD=true
  fi
  shift
  ;;
  -c|--compile)
  EXEC_COMP=true
  shift
  ;;
  *)
  POSITIONAL+=("$1")
  shift
  ;;
esac
done
set -- "${POSITIONAL[@]}"

if [[ $EXEC_INIT = true ]]; then initialize; fi
if [[ $EXEC_ADD = true ]]; then addPost; fi
if [[ $EXEC_COMP = true ]]; then genIndex; fi
