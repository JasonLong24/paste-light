#!/usr/bin/env bash
#
#		paste
#		~~~~~
#
#		Author: Jason Long <jsnal>
# 	URL: https://github.com/jsnal/paste.light
#

EXEC_INIT=false
EXEC_ADD=false
EXEC_COMP=false
EXEC_SEND_OUTPUT=false
EXEC_LISTEN=false
SEND_OUTPUT_PORT=80
SEND_OUTPUT_HOST=127.0.0.1

function isInit() {
    if [[ -f .paste ]]; then
        return 0
    else
        return 1
    fi
}

function isOtherArgs() {
    # Add Arguments that the user can execute
    local poss_exec=( "$EXEC_LISTEN" "$EXEC_INIT" "$EXEC_ADD" "$EXEC_COMP" )
    for i in "${poss_exec[@]}"; do
        if [[ $i = true ]]; then
            count=$(expr $count + 1)
        fi
    done

    if [[ $count -gt 1 ]]; then
        return 0
    else
        return 1
    fi
}

function initialize() {
    if isOtherArgs; then echo You cannot execute initialize command with other arguments. See --help. && exit 1; else
        if isInit; then echo Project already initialized && exit 0; else
            mkdir posts && touch .paste
            echo -e 'Project initialized\nSee --help for usage.'
            exit 0
        fi
    fi
}

function addPost() {
    if isOtherArgs; then echo You cannot add a new post with other commands. See --help. && exit 1; else
        if isInit; then
            touch posts/$POST_FILE
            local post_ft=$(echo $POST_FILE | cut -d . -f2)
            printf  '%s\n%s\n%s\n' '{{*date: 1/1/1' '{{*title: Example Title' "{{*filetype: $post_ft" > posts/$POST_FILE
            if [ -z $EDITOR ]; then
                nano posts/$POST_FILE
            else
                $EDITOR posts/$POST_FILE
            fi
            exit 0
        fi
    fi
}

function genIndex() {
      if isInit; then
          mkdir -p build
          local postCount=$(find ./posts -maxdepth 1 -type f | wc -l)
          if [ -f index.html ]; then rm index.html && touch index.html; else touch index.html; fi
          genHeader index.html
          for (( i=1; i<=$postCount; i++ )); do
              local fileName=$(find ./posts -type f | awk NR==$i)
              # Build Files without comments and HTML format
              cat $fileName | sed -e '/^\s*{{*.*$/d' > build/$(echo $fileName | sed 's/.\/posts\///g').paste

              # Generate Table Rows
              echo "<tr class=\"paste-tbl-row\">" >> index.html
              genRow index.html "$(getPostName $i)"
              genRow index.html "$(getDate $i)"
              genRow index.html "$(getFileType $i)"
              genRow index.html "<a href="build/$(echo $fileName | sed 's/.\/posts\///g').paste">GET</a>"
              echo "</tr>" >> index.html
          done
          if [[ $SEARCH_BAR = true ]]; then
              printf '%s\n' "<input type='text' id='table-filter' onkeyup='filter()' placeholder='Search Posts'>" >> index.html
          fi
          printf '%s\n' "<p id='paste-title'>$PASTE_TITLE</p>" >> index.html
          printf '%s\n' '</table>' >> index.html
          printf '%s\n%s'  "<footer>Last Updated: $(date +'%m/%d/%Y')</footer>" '</html>' >> index.html
      else
          echo This project is not initialized
      fi
}

function isPostName() {
    if cat $(find ./posts -type f | awk NR==$1) | sed -e 's/{{\*//g' -e 3q | grep 'title:' > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

function getPostName() {
    if isPostName $i; then
        cat $(find ./posts -type f | awk NR==$i) | sed -e 's/{{\*//g' -e 3q | grep 'title:' | cut -d : -f2 | sed -e's/^[ \t]*//'
    else
        echo -e 'Title not found for' $(find ./posts -type f | awk NR==$i) '\nPlease add a title' && exit 1
    fi
}

function isDate() {
    if cat $(find ./posts -type f | awk NR==$1) | sed -e 's/{{\*//g' -e 3q | grep 'date:' > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

function getDate() {
    if isDate $1; then
        cat $(find ./posts -type f | awk NR==$i) | sed -e 's/{{\*//g' -e 3q | grep 'date:' | cut -d : -f2 | sed -e 's/^[ \t]*//'
    fi
}

function getFileType() {
    cat $(find ./posts -type f | awk NR==$i) | sed -e 's/{{\*//g' -e 3q | grep 'filetype:' | cut -d : -f2 | sed -e 's/^[ \t]*//'
}

function genHeader() {
    printf '%s\n%s\n%s\n%s\n%s' '<html>' '<header>' '<link rel="stylesheet" type="text/css" href="style.css">'  "<script charset='utf-8' src='js/index.js'></script>" '</header>' > $1
    printf '\n%s\n%s\n' '<table id="paste-tbl-container">' '<tr class="paste-tbl-row">' >> $1
    printf  '%s\n%s\n%s\n%s\n%s\n' '<th class="paste-tbl-header">Name</th>' '<th class="paste-tbl-header">Date</th>' '<th class="paste-tbl-header">Filetype</th>' '<th class="paste-tbl-header">View</th>' '</tr>' >> $1
}

function genRow() {
    printf '%s\n' "<td class=\"paste-tbl-data\">$2</td>" >> $1
}

function pushOutput() {
    if [ ! -f $SEND_OUTPUT ]; then echo "$SEND_OUTPUT is not a valid file. See --help."; exit 1; fi
    read -p "Please enter a title: " entryTitle && read -p "Please enter the date: " entryDate && read -p "Please enter a filetype: " entryFT
    echo -e "{{*title: $entryTitle\n{{*date: $entryDate\n{{*filetype: $entryFT" | cat - $SEND_OUTPUT | nc -v -q 0 $SEND_OUTPUT_HOST $SEND_OUTPUT_PORT
    echo File Sent
}

function pushListener() {
    if isInit; then
        while true ; do
            x=$(nc -l -q 0 -p $SEND_OUTPUT_PORT)
            local filename=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
            echo "$x" > posts/"$filename".txt
            genIndex
            echo -e "File found at $(date). Assigned $filename."
        done
    else
        echo "This project is not initialized. See --help." && exit 1
    fi
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -init|--initialize)
            EXEC_INIT=true
            shift
            ;;
        -a|--add)
            if [[ $2 = "" ]] || [[ $2 =~ ^- ]]; then
                echo add takes one arguement. See --help && exit 1
            else
                POST_FILE="$2"
                EXEC_ADD=true
            fi
            shift
            ;;
        -c|--compile)
            EXEC_COMP=true
            shift
            ;;
        -t|--title)
            PASTE_TITLE="$2"
            shift ;;
        --search-bar)
            SEARCH_BAR="$2"
            shift ;;
        --send)
            EXEC_SEND_OUTPUT=true
            SEND_OUTPUT="$2"
            shift ;;
        -p|--port)
            SEND_OUTPUT_PORT="$2"
            shift ;;
        --host)
            SEND_OUTPUT_HOST="$2"
            shift ;;
        -l|--listen)
            EXEC_LISTEN=true
            shift ;;
        *)
            POSITIONAL+=("$1")
            shift
            ;;
    esac
done
set -- "${POSITIONAL[@]}"

if [[ $EXEC_INIT = true ]]; then initialize; fi
if [[ $EXEC_ADD = true ]]; then addPost; fi
if [[ $EXEC_COMP = true ]]; then genIndex; fi
if [[ $EXEC_SEND_OUTPUT = true ]]; then pushOutput; fi
if [[ $EXEC_LISTEN = true ]]; then pushListener; fi
